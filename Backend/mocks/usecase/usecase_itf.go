// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	dto "Backend/dto"

	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// UsecaseItf is an autogenerated mock type for the UsecaseItf type
type UsecaseItf struct {
	mock.Mock
}

// BuildStockData provides a mock function with given fields: _a0
func (_m *UsecaseItf) BuildStockData(_a0 *dto.DataPerSymbol) *dto.StockDataRes {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for BuildStockData")
	}

	var r0 *dto.StockDataRes
	if rf, ok := ret.Get(0).(func(*dto.DataPerSymbol) *dto.StockDataRes); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.StockDataRes)
		}
	}

	return r0
}

// CollectSymbol provides a mock function with given fields: _a0, _a1
func (_m *UsecaseItf) CollectSymbol(_a0 *gin.Context, _a1 *dto.CollectSymbolReq) (*dto.StockDataRes, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CollectSymbol")
	}

	var r0 *dto.StockDataRes
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *dto.CollectSymbolReq) (*dto.StockDataRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *dto.CollectSymbolReq) *dto.StockDataRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.StockDataRes)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *dto.CollectSymbolReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSymbol provides a mock function with given fields: _a0, _a1
func (_m *UsecaseItf) DeleteSymbol(_a0 *gin.Context, _a1 *dto.DeleteSymbolReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSymbol")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *dto.DeleteSymbolReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSymbols provides a mock function with given fields: _a0, _a1
func (_m *UsecaseItf) GetSymbols(_a0 *gin.Context, _a1 *dto.GetSymbolsReq) (*dto.AlphaSymbolsRes, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSymbols")
	}

	var r0 *dto.AlphaSymbolsRes
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *dto.GetSymbolsReq) (*dto.AlphaSymbolsRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *dto.GetSymbolsReq) *dto.AlphaSymbolsRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AlphaSymbolsRes)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *dto.GetSymbolsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnexpectedInfo provides a mock function with given fields: _a0
func (_m *UsecaseItf) GetUnexpectedInfo(_a0 []byte) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUnexpectedInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NextWeek provides a mock function with given fields: _a0
func (_m *UsecaseItf) NextWeek(_a0 time.Time) *dto.WeekRes {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NextWeek")
	}

	var r0 *dto.WeekRes
	if rf, ok := ret.Get(0).(func(time.Time) *dto.WeekRes); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.WeekRes)
		}
	}

	return r0
}

// ParseOHLCV provides a mock function with given fields: _a0, _a1
func (_m *UsecaseItf) ParseOHLCV(_a0 *gin.Context, _a1 *map[string]string) (*dto.DailyOHLCVRes, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ParseOHLCV")
	}

	var r0 *dto.DailyOHLCVRes
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *map[string]string) (*dto.DailyOHLCVRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *map[string]string) *dto.DailyOHLCVRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.DailyOHLCVRes)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *map[string]string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrevWeekend provides a mock function with given fields: _a0
func (_m *UsecaseItf) PrevWeekend(_a0 time.Time) time.Time {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PrevWeekend")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(time.Time) time.Time); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// StoredData provides a mock function with given fields: _a0
func (_m *UsecaseItf) StoredData(_a0 *gin.Context) ([]*dto.StockDataRes, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for StoredData")
	}

	var r0 []*dto.StockDataRes
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) ([]*dto.StockDataRes, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) []*dto.StockDataRes); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.StockDataRes)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUsecaseItf creates a new instance of UsecaseItf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecaseItf(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsecaseItf {
	mock := &UsecaseItf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
