// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	dto "Backend/dto"

	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// RepoItf is an autogenerated mock type for the RepoItf type
type RepoItf struct {
	mock.Mock
}

// CheckSymbolExists provides a mock function with given fields: _a0, _a1
func (_m *RepoItf) CheckSymbolExists(_a0 *gin.Context, _a1 *dto.CollectSymbolReq) (bool, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CheckSymbolExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *dto.CollectSymbolReq) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *dto.CollectSymbolReq) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *dto.CollectSymbolReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSymbol provides a mock function with given fields: _a0, _a1
func (_m *RepoItf) DeleteSymbol(_a0 *gin.Context, _a1 *dto.DeleteSymbolReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSymbol")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *dto.DeleteSymbolReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertNewSymbolData provides a mock function with given fields: _a0, _a1
func (_m *RepoItf) InsertNewSymbolData(_a0 *gin.Context, _a1 *dto.DataPerSymbol) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertNewSymbolData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *dto.DataPerSymbol) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoredData provides a mock function with given fields: _a0
func (_m *RepoItf) StoredData(_a0 *gin.Context) ([]dto.DataPerSymbol, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for StoredData")
	}

	var r0 []dto.DataPerSymbol
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) ([]dto.DataPerSymbol, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) []dto.DataPerSymbol); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.DataPerSymbol)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepoItf creates a new instance of RepoItf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepoItf(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepoItf {
	mock := &RepoItf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
